#!/bin/bash
set -euo pipefail

s="$(setterm --back cyan --fore white --bold on)"
b="$(setterm --bold on --fore white)"
r="$(setterm --default)"
cat <<EOF
$s Make sure that                                       $r
$s   * all tasks you know are recorded for each project $r
$s   * the +next task is correctly set                  $r
EOF

project_queue_file=/tmp/review-tasks.queue

if [ "${1:-x}" = reset ]; then
    echo "Reset requested"
    rm "${project_queue_file}"
fi

if [ ! -f "$project_queue_file" ]; then
    echo 'Starting new review'
    task \( +PENDING or +WAITING \) _unique project > /tmp/review-tasks.queue
fi

if [ "$(stat --format '%s' "$project_queue_file")" -eq 0 ]; then
    setterm --fore green
    echo "Review done."
    setterm --default
    rm "${project_queue_file}"
    exit
fi

project="$(head -n1 "${project_queue_file}")"
echo "Review in progress. Projects left: $b$(wc -l "${project_queue_file}" | cut -f1 -d' ')$r"
echo "Current project: $b$project$r"
tail +2 "${project_queue_file}" > "${project_queue_file}.new"
mv "${project_queue_file}.new" "${project_queue_file}"

echo
task \
    rc.report.next.filter='status:pending or status:waiting' \
    rc.report.next.columns=id,start.age,entry.age,depends,priority,project,tags,recur,scheduled.countdown,wait.remaining,due.relative,until.remaining,description,urgency \
    rc.report.next.labels=ID,Active,Age,Deps,P,Project,Tag,Recur,S,Wait,Due,Until,Description,Urg \
    rc.verbose=label,sync \
    next "project.is:$project"
